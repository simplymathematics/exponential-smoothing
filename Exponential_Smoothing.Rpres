Exponential Smoothing
========================================================
author: CUNY SPS DATA 624
date: 2/19/19
autosize: true


Moving Average
========================================================
- Averages all the previous data to come up with a forecast.
- Does not handle seasonality well
- Does not handle short-term trends changes well 


$$ \\ \frac{1}{n}\sum_{i=0}^{n-1}p_{m-i} $$

Weighted Moving Average
========================================================
- like the above, but there are scalar multipliers included
- defined mathematically as a convolution of the data with a fixed weighting function
- For an n-day moving average, the weights descrease in an arithmetic progression


$$ \\ WMA = np_m + (n-1) p_{m-1} + ... + 2p_{M-n+2} + p_{m-n+1} $$


Simple Exponential Smoothing
========================================================
- Forecast future value using a weighted average of all previous values in the series
- Uses: Forecast a series with no trend and no seasonality
- Advantages: Simple, popular, adaptive, removes high-frequency noise
    + Smoothing constant alpha
        - Alternative form: F(t+1) = F(t) + alpha * E(t)
          i.e. next_forecast = prev_forecast + alpha * (prev_forecast_error)
            
Alpha Parameter
=======================================================
- Set between 0 and 1
- Weights the previous forecast values relative to the new measured values
- Determines how much weight is given to the past
  + alpha=1: past values have no effect on forecast
  + alpha=0: past values have equal effect on forecast (over-smoothing)
  + Typical: alpha is closer to 0 than 1

            

Optimization
======================================================
Usually you choose alpha to minimize your squared sum error, defined as:
$$ SSE = \sum_{t=1}^{T}(y_t-\hat{y}_{t|t-1})^2 $$

Because this is a non-linear function, optimization is non-trivial. Specific methods include calculus, iterative methods, and heurisitics.



Why is it called exponential smoothing?
======================================================
- It uses a convolution of the exponential window function with the data
- By using the recursive definition, we see an exponentially decreasing weight on our previously forecasted data

$$ \alpha [x_t + (1-\alpha)x_{t-1} + (1-\alpha)^2 x_{t-2} + (1-\alpha)^3 x_{t-3} + \cdots + (1-\alpha)^{t-1} x_1 $$


Time Constant
======================================================
The time constant of an exponential moving average is the period for the forecasted function to reach
$$ 1-\frac{1}{e} \approx 63.2\% $$
This constant can define alpha
$$ \alpha  = 1-e^{- \frac{\Delta T}{\tau}} $$
when $ \Delta T $ is the sampling interval. When it is much larger than $\tau$ 
$$ \alpha \approx \frac{\Delta T}{\tau}$$


Holt's Exponential Smoothing
========================================================
- Sometimes called "double exponential smoothing"
- Series with trend but no seasonality
- Has two updating equations: one each for level and trend
    + Level Equation: Compared with SES, it adds a trend term for computing the level
    + Trend Equation: updates trend based on difference between the most recent level values
        - this allows trend to vary over time
- Has two smoothing constants, $\alpha$ and $\beta$

Winter's Exponential Smoothing
========================================================
- Sometimes called "triple exponential smoothing"
- Series with trend and seasonality
- Has three updating equations, one each for updating level, trend and seasonality
- Additive Seasonality: Forecast = Level + Trend + Seasonality
    + F(t+k) = L(t) + k*T(t) + S(t+k-M)
- Multiplicative Seasonality: Forecast = (Level + Trend) * Seasonality
    + F(t+k) = (L(t) + k*T(t)) * S(t+k+M)

Simple Exponential Smoothing HoltWinters Filtering (1)
========================================================

```{r, echo = TRUE}
## prepare a time series dataset
x <- uspop + rnorm(uspop, sd = 5);
```
<center>
```{r s1, echo = FALSE}
plot(x)
```
</center>

Simple Exponential Smoothing HoltWinters Filtering (2)
========================================================
Apply HoltWinters filtering with alpha (level) only
```{r}
(m <- HoltWinters(x, beta = FALSE, gamma = FALSE))

```

Simple Exponential Smoothing HoltWinters Filtering (3)
========================================================
```{r}
fitted(m) #extracts fitted values
```

Simple Exponential Smoothing HoltWinters Filtering (4)
========================================================
<center>
```{r}
plot(m)
lines(fitted(m)[,1], col = 2)

```
</center>

Holt's Exponential Smoothing HoltWinters Filtering (1)
========================================================
```{r, echo = TRUE}
(m <- HoltWinters(x, gamma = FALSE))
```
  
Holt's Exponential Smoothing HoltWinters Filtering (2)
========================================================
```{r, echo = TRUE}
fitted(m)
```

Holt's Exponential Smoothing HoltWinters Filtering (3)
========================================================
<center>
```{r, echo = TRUE}
par(mar=c(1,1,1,1))
plot(m)
lines(fitted(m)[,1], col = 4)
```
</center>

Winter's Exponential Smoothing HoltWinters Filtering (1)
========================================================
<center>
```{r, echo=TRUE}
plot(co2)

```
</center>


Winter's Exponential Smoothing HoltWinters Filtering (2)
========================================================
<center>
```{r, echo=TRUE}
(m <- HoltWinters(co2))

```
</center>

Winter's Exponential Smoothing HoltWinters Filtering (3)
========================================================
<center>
```{r, echo = TRUE}
fitted(m)
```
</center>

Winter's Exponential Smoothing HoltWinters Filtering (4)
========================================================
<center>
```{r, echo = TRUE}
plot(m)
```
</center>

Winter's Exponential Smoothing HoltWinters Filtering (5)
========================================================
<center>
```{r, echo = TRUE}
plot(fitted(m))
```
</center>
Winter's Exponential Smoothing HoltWinters Filtering (6)
========================================================
<center>
```{r, echo = TRUE}
plot(AirPassengers)
```
</center>

Winter's Exponential Smoothing HoltWinters Filtering (7)
========================================================
<center>
```{r, echo = TRUE}
(m <- HoltWinters(AirPassengers, seasonal = "mult"))
```
</center>
Winter's Exponential Smoothing HoltWinters Filtering (8)
========================================================
<center>
> plot(m)

```{r, echo = FALSE}
plot(m)
```
</center>
Compare HoltWinters() vs ets()
========================================================

- Optimizing different criterion. The former optimizing the MSE, and the later optimizing the likehood function.

- The two functions use different optimization routines and different starting values. 

- ets() searches over a restricted parameter space to ensure the resulting model is forecastable. HoltWinters() ignores this issue (it was written before the problem was even discovered).

- According to Hyndman, ets() is usually more reliable.


References
========================================================

[Hyndman](https://otexts.com/fpp2/ets-forecasting.html)

[Engineering and Statistics Handbook](https://www.itl.nist.gov/div898/handbook/pmc/section4/pmc43.htm)

[HoltWinters's help function in R](https://www.youtube.com/watch?v=mrLiC1biciY)

[Galit Shmueli, Videos on Exponential Smoothing on Youtube](https://robjhyndman.com/hyndsight/estimation2/)


